{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","wrapper","padding","rootTabela","width","overflowX","table","minWidth","root","display","alignItems","input","marginLeft","spacing","flex","iconButton","button","margin","analisarResposta","response","ok","mensagemErro","status","Error","json","parseJsonResponse","jsonResponse","map","row","id","title","state","created_at","Boolean","window","location","hostname","match","ReactDOM","render","classes","useState","loading","setLoading","rows","setRows","termoPesquisa","setTermoPesquisa","consultarPullRequests","e","a","apiEndpoint","fetch","then","catch","erro","console","log","Fragment","CssBaseline","Container","maxWidth","className","Grid","container","item","xs","Paper","InputBase","placeholder","value","onChange","target","Fade","unmountOnExit","in","style","transitionDelay","CircularProgress","IconButton","aria-label","onClick","Table","size","TableHead","TableRow","TableCell","TableBody","i","key","component","scope","Button","variant","color","disabled","length","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5c83d9ef.chunk.js","sourcesContent":["\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Fade from '@material-ui/core/Fade';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\n\n\nimport InputBase from '@material-ui/core/InputBase';\nimport IconButton from '@material-ui/core/IconButton';\nimport SearchIcon from '@material-ui/icons/Search';\n\n\nconst useStyles = makeStyles(theme => ({\n    wrapper: {\n        padding: '2em'\n    },\n    rootTabela: {\n        width: '100%',\n        overflowX: 'auto',\n    },\n    table: {\n        minWidth: 650,\n    },\n    root: {\n        padding: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        width: '100%'\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    iconButton: {\n        padding: 10,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n}));\n\n\nfunction analisarResposta(response) {\n\n    if (!response.ok) {\n\n        let mensagemErro = 'Houve um erro ao efetuar a consulta remota.';\n\n        if (response.status === 404) {\n            mensagemErro = 'O repositório não foi localizado.';\n        }\n\n        throw new Error(mensagemErro);\n    }\n    return response.json();\n}\n\n\nfunction parseJsonResponse(jsonResponse) {\n    return jsonResponse.map(row => {\n        return {\n            id: row.id,\n            title: row.title,\n            state: row.state,\n            created_at: row.created_at\n        }\n    });\n}\n\n\nexport default function App() {\n\n    const classes = useStyles();\n\n    const [loading, setLoading] = useState(false);\n    const [rows, setRows] = useState([]);\n    const [termoPesquisa, setTermoPesquisa] = useState('yahoo/kafka-manager');\n\n    const gravarPullRequests = async e => {\n\n        const apiEndpoint = `https://github-pullrequest-api.herokuapp.com/`;\n        const fetchConfig = {\n            method: 'POST',\n            headers: new Headers({\n                'content-type': 'application/json'\n            })\n        }\n\n        fetch(apiEndpoint, fetchConfig)\n            .then(analisarResposta)\n    };\n\n    const consultarPullRequests = async e => {\n\n        // limpa a lista de pull requests\n        setRows([]);\n\n        // aplica o termo da pesquisa no template de url para consulta de pull requests do git\n        const apiEndpoint = `https://api.github.com/repos/${termoPesquisa}/pulls`;\n\n        // inicia o indicador de pesquisa\n        setLoading(true);\n\n        // consulta os pull requests na API do github e renderiza na tabela\n        fetch(apiEndpoint)\n            .then(analisarResposta)\n            .then(parseJsonResponse)\n            .then(rows => {\n                setLoading(false);\n                setRows(rows);\n            })\n            .catch(erro => {\n                setLoading(false);\n                console.log(erro);\n            });\n    };\n\n    const searchHandle = e => {\n        setTermoPesquisa(e.target.value);\n    };\n\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            <Container maxWidth=\"md\" className={classes.wrapper}>\n\n                <Grid container spacing={3}>\n                    <Grid item xs={12}>\n                        <Paper className={classes.root}>\n                            <InputBase\n                                className={classes.input}\n                                placeholder=\"Caminho do repositório\"\n                                value={termoPesquisa}\n                                onChange={searchHandle} />\n                            <Fade unmountOnExit\n                                in={loading}\n                                style={{\n                                    transitionDelay: loading ? '800ms' : '0ms'\n                                }}>\n                                <CircularProgress />\n                            </Fade>\n                            <IconButton className={classes.iconButton} aria-label=\"search\" onClick={consultarPullRequests}>\n                                <SearchIcon />\n                            </IconButton>\n                        </Paper>\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <Paper className={classes.rootTabela}>\n                            <Table className={classes.table} size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>#</TableCell>\n                                        <TableCell>Title</TableCell>\n                                        <TableCell>Created At</TableCell>\n                                        <TableCell>State</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {rows.map((row, i) => (\n                                        <TableRow key={row.id}>\n                                            <TableCell>{i + 1}</TableCell>\n                                            <TableCell component=\"th\" scope=\"row\">\n                                                {row.title}\n                                            </TableCell>\n                                            <TableCell>{row.created_at}</TableCell>\n                                            <TableCell>{row.state}</TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </Paper>\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <Button variant=\"contained\" color=\"primary\" className={classes.button}\n                            disabled={rows.length === 0}>\n                            Gravar\n                        </Button>\n                    </Grid>\n                </Grid>\n\n            </Container>\n        </React.Fragment>\n    );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}